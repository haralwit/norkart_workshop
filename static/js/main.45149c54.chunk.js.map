{"version":3,"sources":["components/Header.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","position","mapstyle","background","zIndex","MapboxGLMap","useState","map","setMap","mapContainer","useRef","useEffect","mapboxgl","accessToken","process","Map","container","current","center","zoom","on","resize","document","getElementById","getElementsByTagName","Marker","setLngLat","addTo","initializeMap","switchLayer","layer","layer_id","target","id","setStyle","ref","el","type","name","value","onClick","for","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uLAEMA,G,MAAS,CACXC,OAAQ,OACRC,MAAO,QACPC,QAAS,OACTC,UAAW,SACXC,SAAU,SAWCC,EARA,WACX,OACI,yBAAKC,MAAOP,GACR,mF,uBCTNA,G,MAAS,CACbE,MAAO,OACPD,OAAQ,qBACRO,SAAU,aAGNC,EAAW,CACfD,SAAU,WACVE,WAAY,QACZC,OAAQ,EACRR,QAAS,IA4DIS,EApDK,WAAO,IAAD,EACFC,mBAAS,MADP,mBACjBC,EADiB,KACZC,EADY,KAElBC,EAAeC,iBAAO,MAE5BC,qBAAU,WACRC,IAASC,YAAcC,yFAsBlBP,GArBiB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACzBF,EAAM,IAAIK,IAASG,IAAI,CAC3BC,UAAWP,EAAaQ,QACxBjB,MAAO,kCACPkB,OAAQ,CAAC,WAAY,YACrBC,KAAM,KAIRZ,EAAIa,GAAG,QAAQ,WACbZ,EAAOD,GACPA,EAAIc,YAGOC,SAASC,eAAe,gBACjBC,qBAAqB,UAC5B,IAAIZ,IAASa,QACzBC,UAAU,CAAC,WAAY,aAAaC,MAAMpB,GAInCqB,CAAc,CAAEpB,SAAQC,mBACjC,CAACF,IAEJ,IAAMsB,EAAc,SAACC,GACnB,IAAIC,EAAWD,EAAME,OAAOC,GAC5B1B,EAAI2B,SAAS,0BAA4BH,IAG3C,OAAO,6BACH,yBAAKI,IAAK,SAAAC,GAAE,OAAK3B,EAAaQ,QAAUmB,GAAKpC,MAAOP,IACpD,yBAAKwC,GAAG,eAAejC,MAASE,GAC9B,2BAAO+B,GAAG,cAAcI,KAAK,QAAQC,KAAK,UAAUC,MAAM,UAAUC,QAASX,IAC7E,2BAAOY,IAAI,eAAX,WACA,2BAAOR,GAAG,YAAYI,KAAK,QAAQC,KAAK,UAAUC,MAAM,QAAQC,QAASX,IACzE,2BAAOY,IAAI,aAAX,SACA,2BAAOR,GAAG,WAAWI,KAAK,QAAQC,KAAK,UAAUC,MAAM,OAAOC,QAASX,IACvE,2BAAOY,IAAI,YAAX,QACA,2BAAOR,GAAG,eAAeI,KAAK,QAAQC,KAAK,UAAUC,MAAM,WAAWC,QAASX,IAC/E,2BAAOY,IAAI,gBAAX,YACA,2BAAOR,GAAG,eAAeI,KAAK,QAAQC,KAAK,UAAUC,MAAM,YAAYC,QAASX,IAChF,2BAAOY,IAAI,gBAAX,gBCjEFhD,EAAS,CACbiD,SAAS,UAYIC,MATf,WACE,OACE,yBAAK3C,MAAOP,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.45149c54.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst styles = {\r\n    height: '60px',\r\n    width: '100vw',\r\n    padding: '10px',\r\n    textAlign: 'center',\r\n    fontSize: '30px',\r\n  };\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div style={styles}>\r\n            <header>Hvor er Moholt? NÃ¥ i mer enn en type kart!</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"calc(100vh - 80px)\",\r\n  position: \"absolute\"\r\n};\r\n\r\nconst mapstyle = {\r\n  position: \"absolute\",\r\n  background: \"white\",\r\n  zIndex: 1,\r\n  padding: 10,\r\n};\r\n\r\nconst onClickMapStyle = () => {\r\n\r\n}\r\n\r\n\r\nconst MapboxGLMap = () => {\r\n  const [map, setMap] = useState(null);\r\n  const mapContainer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\", // stylesheet location\r\n        center: [10.4326436, 63.4111865],\r\n        zoom: 13\r\n      \r\n      });\r\n\r\n      map.on(\"load\", () => {\r\n        setMap(map);\r\n        map.resize();\r\n      });\r\n      \r\n      var layers = document.getElementById(\"mapstylemenu\");\r\n      var inputs = layers.getElementsByTagName(\"input\");\r\n      var marker = new mapboxgl.Marker()\r\n      .setLngLat([10.4326436, 63.4111865]).addTo(map);\r\n\r\n    };\r\n    \r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n  }, [map]);\r\n\r\n  const switchLayer = (layer) => {\r\n    var layer_id = layer.target.id;\r\n    map.setStyle(\"mapbox://styles/mapbox/\" + layer_id)\r\n  }\r\n\r\n  return <div>\r\n      <div ref={el => (mapContainer.current = el)} style={styles} />\r\n      <div id=\"mapstylemenu\" style = {mapstyle}>\r\n        <input id=\"streets-v11\" type=\"radio\" name=\"rtoggle\" value=\"streets\" onClick={switchLayer}/>\r\n        <label for=\"streets-v11\">streets</label>\r\n        <input id=\"light-v10\" type=\"radio\" name=\"rtoggle\" value=\"light\" onClick={switchLayer}/>\r\n        <label for=\"light-v10\">light</label>\r\n        <input id=\"dark-v10\" type=\"radio\" name=\"rtoggle\" value=\"dark\" onClick={switchLayer}/>\r\n        <label for=\"dark-v10\">dark</label>\r\n        <input id=\"outdoors-v11\" type=\"radio\" name=\"rtoggle\" value=\"outdoors\" onClick={switchLayer}/>\r\n        <label for=\"outdoors-v11\">outdoors</label>\r\n        <input id=\"satellite-v9\" type=\"radio\" name=\"rtoggle\" value=\"satellite\" onClick={switchLayer}/>\r\n        <label for=\"satellite-v9\">satellite</label>\r\n      </div>\r\n    </div>\r\n};\r\n\r\nexport default MapboxGLMap;","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport MapboxGLMap from \"./components/MapboxGLMap\";\r\n\r\nconst styles = {\r\n  overflow:'hidden'\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={styles}>\r\n      <Header/>\r\n      <MapboxGLMap />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}